.slide-to-leftTop {
  animation: slide-to-leftTop 0.8s linear;
}

.animation-vibrating {
  animation: animation-vibrating 4s linear infinite;
}
.animation-blurring {
  animation: animation-blurring 4s linear infinite;
}

.animation-logo {
  animation: animation-logo 4s linear infinite;
}

.animation-bg-opacity {
  animation: animation-bg-opacity 20s linear infinite;
}

.animation-appear {
  animation: animation-appear 0.5s 0.3s ease;
}

@keyframes animation-appear {
  0% {
    border: 0.14rem solid rgba(255, 255, 0, 0.6);
    height: 0vh;
    width: 0;
  }

  50% {
    width: 0;
  }

  100% {
    height: 12vh;
    width: 40vw;
    border: 0.14rem solid rgba(255, 255, 0, 0.6);
  }
}

@keyframes animation-bg-opacity {
  0% {
    opacity: 0.15;
  }
  50% {
    opacity: 0.9;
  }

  100% {
    opacity: 0.15;
  }
}

@keyframes slide-to-leftTop {
  0% {
    border: none;
    color: #f3eada;
  }
  100% {
    color: #00c89b;
    right: 0%;
    top: 0%;
    transform: scale(0.7);
    transition: background-color 0.45s;
    border: none;
  }
}

@keyframes animation-blurring {
  0% {
    color: rgba(255, 255, 0, 0.8);
  }

  46% {
    color: rgba(255, 255, 0, 0.2);
  }

  51% {
    color: rgba(255, 255, 0, 0.8);
  }
}

@keyframes animation-vibrating {
  0% {
  }

  31% {
    transform: translate(0.5%, 0.3%);
  }

  35% {
    transform: translate(0.45%, 0.5%);
  }

  40% {
    transform: translate(0.55%, -1%);
  }

  42% {
    transform: translate(0.65%, 2.3%);
  }

  44% {
    transform: translate(0.75%, 1%);
  }

  46% {
    transform: translate(0.75%, 2.3%);
    transform-style: preserve-3d;
  }

  47% {
    transform: translate(0.45%, 1%);
  }
  51% {
  }
  55% {
    transform: translate(0, 0);
  }

  100% {
    transform-style: preserve-3d;
    transform: rotateZ(0deg) rotateY(0) scale(1);
  }
}

@keyframes animation-logo {
  0% {
    color: rgba(255, 255, 0, 0.8);
  }

  31% {
    transform: translate(0.5%, 0.3%);
  }

  35% {
    transform: translate(0.45%, 0.5%);
  }

  40% {
    transform: translate(0.55%, -1%);
  }

  42% {
    transform: translate(0.65%, 2.3%);
  }

  44% {
    transform: translate(0.75%, 1%);
  }

  46% {
    transform: translate(0.75%, 2.3%);
    color: rgba(255, 255, 0, 0.2);
    transform-style: preserve-3d;
  }

  47% {
    transform: translate(0.45%, 1%);
  }
  51% {
    color: rgba(255, 255, 0, 0.8);
  }
  55% {
    transform: translate(0, 0);
  }

  100% {
    transform-style: preserve-3d;
    transform: rotateZ(0deg) rotateY(0) scale(1);
  }
}

@mixin glitchCopy {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
  position: relative;
  color: white;
  font-size: 4.5vw;
  /* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
  animation: glitch-skew 1s infinite linear alternate-reverse;

  // Creates a copy before our text.
  &::before {
    // Duplicates our text with the mixin.
    @include glitchCopy;
    // Scoots text slightly to the left for the color offset.
    left: 2px;
    // Creates the color 'shadow' that happens on the glitch.
    text-shadow: -2px 0 #ff00c1;
    /* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
    clip: rect(44px, 450px, 56px, 0);
    /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }

  // Creates a copy after our text. Note comments from ::before.
  &::after {
    @include glitchCopy;
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. I then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}
